// –î–≤–æÃÅ–∏—á–Ω–æ–µ –¥–µ—Ä–µÃÅ–≤–æ –ø–æÃÅ–∏—Å–∫–∞ (Binary Search Tree, BST) ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:

//     –∑–Ω–∞—á–µ–Ω–∏–µ (–∫–ª—é—á)

//     —Å—Å—ã–ª–∫—É –Ω–∞ –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ (—Å –º–µ–Ω—å—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)

//     —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ (—Å –±–æ–ª—å—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)

// üìå –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ BST:

// –î–ª—è –ª—é–±–æ–≥–æ —É–∑–ª–∞ node:

//     –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ª–µ–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ < node.value

//     –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ > node.value

//     –¢–∞–∫–æ–µ —É—Å–ª–æ–≤–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤

// –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞

//     –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫, –≤—Å—Ç–∞–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ (–≤ —Å—Ä–µ–¥–Ω–µ–º)
//     –í —Å—Ä–µ–¥–Ω–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–Ω–∏–º–∞—é—Ç O(log n) –≤—Ä–µ–º–µ–Ω–∏, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –º—ã "–æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º" –ø–æ–ª–æ–≤–∏–Ω—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É–∑–ª–æ–≤.

//     –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
//     –î–µ—Ä–µ–≤–æ –ª–µ–≥–∫–æ –ø–æ–Ω—è—Ç—å –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

//     –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
//     –ú–æ–∂–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤, –≥–¥–µ –≤—Å—Ç–∞–≤–∫–∞/—É–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Ä–æ–∂–µ.

//     –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
//     –ú–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é –æ–±—Ö–æ–¥–∞ In-Order).

// –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏

//     –•—É–¥—à–∏–π —Å–ª—É—á–∞–π ‚Äî –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –≤ —Å–ø–∏—Å–æ–∫
//     –ï—Å–ª–∏ –≤—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ—á—Ç–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–µ—Ä–µ–≤–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–æ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ‚Äî –≥–ª—É–±–∏–Ω–∞ –≤—ã—Ä–∞—Å—Ç–∞–µ—Ç –¥–æ O(n), –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –ª–∏–Ω–µ–π–Ω—ã–µ.

//     –ù–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞
//     –ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AVL, –∫—Ä–∞—Å–Ω–æ-—á–µ—Ä–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è) —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π.

//     –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
//     –ß—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å O(log n) –≤–æ –≤—Å–µ—Ö —Å–ª—É—á–∞—è—Ö, –Ω—É–∂–Ω—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã.

/**
 * –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞.
 */
/**
 * –ö–ª–∞—Å—Å —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞.
 */
class BinarySearchTreeNode<K, V> {
	key: K;
	value: V;
	size: number;
	left: BinarySearchTreeNode<K, V> | null = null;
	right: BinarySearchTreeNode<K, V> | null = null;

	/**
	 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —É–∑–µ–ª.
	 * @param key –ö–ª—é—á —É–∑–ª–∞
	 * @param value –ó–Ω–∞—á–µ–Ω–∏–µ —É–∑–ª–∞
	 * @param size –†–∞–∑–º–µ—Ä –ø–æ–¥–¥–µ—Ä–µ–≤–∞ —Å –∫–æ—Ä–Ω–µ–º –≤ —ç—Ç–æ–º —É–∑–ª–µ
	 */
	constructor(key: K, value: V, size: number = 1) {
		this.key = key;
		this.value = value;
		this.size = size;
	}
}

/**
 * –ö–ª–∞—Å—Å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞ (Binary Search Tree).
 */
export class BinarySearchTree<K, V> {
	private root: BinarySearchTreeNode<K, V> | null = null;

	/**
	 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç–æ –ª–∏ –¥–µ—Ä–µ–≤–æ.
	 * @returns true, –µ—Å–ª–∏ –¥–µ—Ä–µ–≤–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	 */
	isEmpty(): boolean {
		return this.size() === 0;
	}

	/**
	 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ.
	 */
	size(): number {
		return this._size(this.root);
	}

	private _size(node: BinarySearchTreeNode<K, V> | null): number {
		return node ? node.size : 0;
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –≤ –¥–µ—Ä–µ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã–π –∫–ª—é—á.
	 * @param key –ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞
	 */
	contains(key: K): boolean {
		return this.get(key) !== null;
	}

	/**
	 * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–ª—é—á—É.
	 * @param key –ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞
	 */
	get(key: K): V | null {
		return this._get(this.root, key);
	}

	private _get(node: BinarySearchTreeNode<K, V> | null, key: K): V | null {
		if (key === null || key === undefined) {
			throw new Error("Key is null or undefined");
		}
		if (!node) return null;

		if (key < node.key) {
			return this._get(node.left, key);
		} else if (key > node.key) {
			return this._get(node.right, key);
		} else {
			return node.value;
		}
	}

	/**
	 * –í—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∞—Ä—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–µ—Ä–µ–≤–æ.
	 * @param key –ö–ª—é—á
	 * @param value –ó–Ω–∞—á–µ–Ω–∏–µ
	 */
	put(key: K, value: V | null | undefined): void {
		if (key === null || key === undefined) {
			throw new Error("Key is null or undefined");
		}
		if (value === null || value === undefined) {
			return;
		}
		this.root = this._put(this.root, key, value);
	}

	private _put(
		node: BinarySearchTreeNode<K, V> | null,
		key: K,
		value: V
	): BinarySearchTreeNode<K, V> {
		if (!node) {
			return new BinarySearchTreeNode(key, value, 1);
		}

		if (key < node.key) {
			node.left = this._put(node.left, key, value);
		} else if (key > node.key) {
			node.right = this._put(node.right, key, value);
		} else {
			node.value = value;
		}

		node.size = 1 + this._size(node.left) + this._size(node.right);
		return node;
	}

	/**
	 * –£–¥–∞–ª—è–µ—Ç —É–∑–µ–ª –ø–æ –∫–ª—é—á—É –∏–∑ –¥–µ—Ä–µ–≤–∞.
	 * @param key –ö–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
	 */
	delete(key: K): void {
		if (key === null || key === undefined) {
			throw new Error("Key is null or undefined");
		}
		this.root = this._delete(this.root, key);
	}
	private _delete(
		node: BinarySearchTreeNode<K, V> | null,
		key: K
	): BinarySearchTreeNode<K, V> | null {
		if (!node) return null;

		if (key < node.key) {
			node.left = this._delete(node.left, key);
		} else if (key > node.key) {
			node.right = this._delete(node.right, key);
		} else {
			// –£–∑–µ–ª –Ω–∞–π–¥–µ–Ω
			if (!node.right) return node.left;
			if (!node.left) return node.right;

			// ‚úÖ –ó–¥–µ—Å—å temp.right –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ null, –∏–Ω–∞—á–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π if —Å—Ä–∞–±–æ—Ç–∞–ª –±—ã
			const temp = node;

			if (!temp.right) {
				throw new Error("Unexpected null right child");
			}

			const min = this._min(temp.right); // ‚¨Ö —Ç–µ–ø–µ—Ä—å OK
			min.right = this._deleteMin(temp.right); // ‚¨Ö —Ç–æ–∂–µ OK
			min.left = temp.left;
			node = min;
		}

		node.size = 1 + this._size(node.left) + this._size(node.right);
		return node;
	}

	private _min(node: BinarySearchTreeNode<K, V>): BinarySearchTreeNode<K, V> {
		let current = node;
		while (current.left !== null) {
			current = current.left;
		}
		return current;
	}

	private _deleteMin(
		node: BinarySearchTreeNode<K, V>
	): BinarySearchTreeNode<K, V> | null {
		if (!node.left) return node.right;
		node.left = this._deleteMin(node.left);
		node.size = 1 + this._size(node.left) + this._size(node.right);
		return node;
	}
}

const bst = new BinarySearchTree();

bst.put(10, "–¥–µ—Å—è—Ç—å");
bst.put(5, "–ø—è—Ç—å");
bst.put(15, "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å");
bst.put(3, "—Ç—Ä–∏");
bst.put(7, "—Å–µ–º—å");
bst.put(12, "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å");
bst.put(18, "–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å");
bst.delete(15);
console.log("–†–∞–∑–º–µ—Ä –¥–µ—Ä–µ–≤–∞:", bst.size()); // üëâ 7

console.log("–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É 7:", bst.get(7)); // üëâ "—Å–µ–º—å"
console.log("–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É 15:", bst.get(15)); // üëâ "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å"
console.log("–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É 100:", bst.get(100)); // üëâ null

console.log("–°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–ª—é—á 12?", bst.contains(12)); // üëâ true
console.log("–°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–ª—é—á 42?", bst.contains(42)); // üëâ false

console.log("–ü—É—Å—Ç–æ–µ –ª–∏ –¥–µ—Ä–µ–≤–æ?", bst.isEmpty()); // üëâ false
